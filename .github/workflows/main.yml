#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Ask matrix.js to produce 7 jobs
      MATRIX_JOBS: 7
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  build:
    needs: matrix_prep
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    name: '${{ matrix.name }}'
    env:
      TZ: ${{ matrix.tz }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 10
      # Install built-in JDK
      - name: 'Set up JDK ${{ matrix.jdk.version }} / ${{ matrix.jdk.distribution }}'
        uses: actions/setup-java@v2
        if: ${{ matrix.jdk.distribution != 'jdkfile' }}
        with:
          distribution: ${{ matrix.jdk.distribution }}
          java-version: ${{ matrix.jdk.version }}
          architecture: x64
      # Install custom JDK from URL
      - name: 'Download JDK ${{ matrix.jdk.distribution }} / ${{ matrix.jdk.version }} from ${{ matrix.jdk.url }}'
        if: ${{ matrix.jdk.distribution == 'jdkfile' }}
        run: |
          jdk_url="${{ matrix.jdk.url }}"
          wget -nv -O "${{ runner.temp }}/java_package.tar.gz" "${jdk_url}"
      - name: 'Set up JDK ${{ matrix.jdk.version }} / ${{ matrix.jdk.url }}'
        uses: actions/setup-java@v2
        if: ${{ matrix.jdk.distribution == 'jdkfile' }}
        with:
          distribution: ${{ matrix.jdk.distribution }}
          java-version: ${{ matrix.jdk.version }}
          jdkFile: '${{ runner.temp }}/java_package.tar.gz'
          architecture: x64
      - name: Test
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: jdk${{ matrix.jdk.version }}
          arguments: |
            --no-parallel --no-daemon --scan ${{ matrix.extraGradleArgs }}
            build javadoc
          properties: |
            test.avatica.extra.jvmargs=${{ matrix.testExtraJvmArgs }}

  linux-avatica:
    name: 'Linux (JDK 8), Avatica master'
    runs-on: ubuntu-latest
    steps:
    - name: 'Set up JDK 8'
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: 'Install Avatica to Maven Local'
      run: |
        ./gradlew publishToMavenLocal -Pcalcite.avatica.version=1.0.0-dev-master -PskipJavadoc
    - name: 'Test Calcite'
      run: |
        git clone --depth 100 https://github.com/apache/calcite.git ../calcite
        cd ../calcite
        ./gradlew --no-parallel --no-daemon build -Pcalcite.avatica.version=1.0.0-dev-master-SNAPSHOT -PenableMavenLocal
